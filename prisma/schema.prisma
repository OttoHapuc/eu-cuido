generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum appointment_status {
  agendado
  em_andamento
  concluido
  cancelado
  troca_urgente
}

enum availability_status {
  entrevista
  indisponivel
  disponivel
  agendado
  cancelado
  troca_urgente
  extra
  cancelamento
}

enum user_status {
  new
  in_progress
  completed
}

model user {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  status     user_status @default(new)

  address              address[]
  notifications        notification[]
  user_roles           user_role_assignment[]
  caregivers           caregiver[]
  responsible_users    responsible_user[]
  vulnerable_users     vulnerable_user[]
  user_onboarding_step user_onboarding_step[]
}

model address {
  id           Int       @id @default(autoincrement())
  user_id      Int
  street       String
  number       String?
  complement   String?
  neighborhood String?
  city         String
  state        String
  zip_code     String
  primary      Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  user   user            @relation(fields: [user_id], references: [id])
  phones address_phone[]
}

model address_phone {
  id           Int       @id @default(autoincrement())
  code         String
  address_id   Int
  phone        String
  is_emergency Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  address address @relation(fields: [address_id], references: [id])
}

model onboarding_step {
  id         Int       @id @default(autoincrement())
  keyword    String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  config onboarding_config[]
  user_onboarding_step user_onboarding_step[]
}

model onboarding_config {
    id         Int       @id @default(autoincrement())
    step_id Int
    reference_table String
    type_save String
    type_step String
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    step onboarding_step @relation(fields: [step_id], references: [id], onDelete: Cascade)
    steps onboarding_step_step[]
}

model onboarding_step_step {
    id         Int       @id @default(autoincrement())
    config_id Int
    order Int
    api_route String
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    config onboarding_config @relation(fields: [config_id], references: [id], onDelete: Cascade)
    fields onboarding_step_field[]
}

model onboarding_step_field {
    id                 Int       @id @default(autoincrement())
    step_id            Int
    reference_colun    String
    external_table     String?
    external_table_where String?
    external_table_order String?
    label              String
    type               String
    created_at         DateTime  @default(now())
    updated_at         DateTime  @updatedAt
    deleted_at         DateTime?

    config     onboarding_step_step              @relation(fields: [step_id], references: [id], onDelete: Cascade)
    background onboarding_step_field_background?
}

model onboarding_step_field_background {
    id         Int       @id @default(autoincrement())
    field_id Int @unique
    placeholder String?
    required Boolean?
    read_only Boolean?
    disabled Boolean?
    color String?
    max_length Int?
    options Json?
    custon_validate_regex String?
    size String?
    block Boolean?
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    field onboarding_step_field @relation(fields: [field_id], references: [id], onDelete: Cascade)
}

model user_onboarding_step {
    id         Int       @id @default(autoincrement())
    user_id    Int
    step_id Int
    status String @default("in_progress")
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    user user @relation(fields: [user_id], references: [id], onDelete: Cascade)
    step onboarding_step @relation(fields: [step_id], references: [id], onDelete: Cascade)
}

model caregiver {
  id                Int       @id @default(autoincrement())
  user_id           Int       @unique
  emergency_contact String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  user           user                     @relation(fields: [user_id], references: [id])
  service_types  caregiver_service_type[]
  availabilities availability[]
  appointments   appointments[]
}

model responsible_user {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user             user                          @relation(fields: [user_id], references: [id])
  vulnerable_users vulnerable_user_responsible[]
  appointments     appointments[]
}

model vulnerable_user {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user              user                           @relation(fields: [user_id], references: [id])
  responsible_users vulnerable_user_responsible[]
  service_types     vulnerable_user_service_type[]
  appointments      appointments[]
}

model role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  name       String

  user_roles    user_role_assignment[]
  notifications notification[]
}

model user_role_assignment {
  id         Int       @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user user @relation(fields: [user_id], references: [id])
  role role @relation(fields: [role_id], references: [id])

  @@unique([user_id, role_id])
}

model service_type {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  caregivers       caregiver_service_type[]
  vulnerable_users vulnerable_user_service_type[]
}

model caregiver_service_type {
  id                 Int       @id @default(autoincrement())
  caregiver_id       Int
  service_type_id    Int
  classification     Int       @default(0)
  services_performed Int       @default(0)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  caregiver    caregiver    @relation(fields: [caregiver_id], references: [id])
  service_type service_type @relation(fields: [service_type_id], references: [id])

  @@unique([caregiver_id, service_type_id])
}

model vulnerable_user_service_type {
  id                 Int       @id @default(autoincrement())
  vulnerable_user_id Int
  service_type_id    Int
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  vulnerable_user vulnerable_user @relation(fields: [vulnerable_user_id], references: [id])
  service_type    service_type    @relation(fields: [service_type_id], references: [id])

  @@unique([vulnerable_user_id, service_type_id])
}

model vulnerable_user_responsible {
  id                  Int       @id @default(autoincrement())
  responsible_user_id Int
  vulnerable_user_id  Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  responsible_user responsible_user @relation(fields: [responsible_user_id], references: [id])
  vulnerable_user  vulnerable_user  @relation(fields: [vulnerable_user_id], references: [id])

  @@unique([responsible_user_id, vulnerable_user_id])
}

model availability {
  id           Int       @id @default(autoincrement())
  day          DateTime?
  start_time   String
  end_time     String
  extra_hours  Int?      @default(0) // Quantidade de horas extras
  extra_value  Float? // Valor total das horas extras
  caregiver_id Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  status       availability_status @default(disponivel)
  caregiver    caregiver           @relation(fields: [caregiver_id], references: [id])
  appointments appointments[]
}

model appointments {
  id                      Int       @id @default(autoincrement())
  start_time              DateTime
  end_time                DateTime
  availability_id         Int
  caregiver_id            Int
  responsible_user_id     Int
  vulnerable_user_id      Int
  note                    String?
  caregiver_score         Int?
  caregiver_temperature   String?
  family_care_score       Int?
  family_care_temperature String?
  caregiver_score_date    DateTime?
  family_care_score_date  DateTime?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  deleted_at              DateTime?

  status           appointment_status @default(agendado)
  availability     availability       @relation(fields: [availability_id], references: [id])
  caregiver        caregiver          @relation(fields: [caregiver_id], references: [id])
  responsible_user responsible_user   @relation(fields: [responsible_user_id], references: [id])
  vulnerable_user  vulnerable_user    @relation(fields: [vulnerable_user_id], references: [id])
}

model notification {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  role_id    Int?
  type       String
  message    String
  is_read    Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user user? @relation(fields: [user_id], references: [id])
  role role? @relation(fields: [role_id], references: [id])

  @@index([user_id])
  @@index([role_id])
}
